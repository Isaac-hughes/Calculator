{"version":3,"sources":["components/button.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","val","buttonLabel","isNaN","onClick","click","App","state","mathDisplay","keys","buttonClick","button","parseInt","clearButtonClick","setState","equateClick","array","split","mathArray","length","y","push","slice","holder","j","console","log","total","num1","num2","operator","temp","i","splice","unshift","this","map","key","index","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ca9209d.chunk.js","sourcesContent":["import React from 'react' ;\nimport \"./button.css\"\nimport \"../App.js\"\n\nconst isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\nconst Button = (props) => {\n    return(\n        <div>\n            <button className={`button ${ isOperator(props.buttonLabel) ? null : \"operator\" }`}\n             onClick={() => props.click(props.buttonLabel)}>{props.buttonLabel}</button>\n        </div>\n    )\n}\n\n\n// Export Button\nexport default Button","import React, {Component} from 'react';\nimport './App.css';\nimport Button from './components/button';\n\nclass App extends Component {\n  state = {\n    mathDisplay: '',\n    keys: [\"7\",\"8\",\"9\",\"C\",\"4\",\"5\",\"6\",\"x\",\"1\",\"2\",\"3\",\"รท\",\"+\",\"0\",\"-\",\"=\"]\n  };\n  buttonClick = (button) => {\n    if (isNaN(parseInt(button))){\n      if(button === \"C\"){\n        this.clearButtonClick()\n      } else if (button === \"x\" || button === \"รท\" || button === \"+\" || button === \"-\"){\n        this.setState({mathDisplay: this.state.mathDisplay + button})\n      } else if (button === \"=\"){\n        this.equateClick()\n      }\n    } else {\n      this.setState({mathDisplay: this.state.mathDisplay + button})\n    }\n  };\n  clearButtonClick = () => {\n    this.setState({mathDisplay: ''})\n  };\n  equateClick = () => {\n    let str = this.state.mathDisplay;\n    let array = str.split(\"\")\n    let mathArray = []\n    for (let i = 0; array.length;){\n      if(array[i] === \"x\" || array[i] === \"รท\" || array[i] === \"+\" || array[i] === \"-\"){\n        let y = array[i]\n        mathArray.push(y)\n        array = array.slice(y.length, array.length)\n      } else if (!isNaN(parseInt(array[i]))){\n        let holder = array[i]\n        for (let j = 1; array.length; j++){\n          if(!isNaN(parseInt(array[j]))){\n            holder = holder + array[j]\n          } else if (isNaN(parseInt(array[j]))){\n            mathArray.push(holder)\n            array = array.slice(holder.length, array.length)\n            holder = ''\n            break\n          } else {\n            console.log(`${array[j]} broke me`)\n          }\n        }\n      }\n    }\n    // dealing with the math array\n    let total = 0\n    let num1 = 0\n    let num2 = 0\n    let operator = ''\n    let temp = 0\n    for (let i = 0; mathArray.length > 1;){\n      num1 = parseInt(mathArray[i])\n      operator = mathArray[i + 1]\n      num2 = parseInt(mathArray[i + 2])\n      if (operator === \"+\"){\n        temp = num1 + num2\n      } else if (operator === \"-\"){\n        temp = num1 - num2\n      } else if (operator === \"x\"){\n        temp = num1 * num2\n      } else if (operator === \"รท\"){\n        temp = num1 / num2\n      } else if (num1 == null || num2 == null || operator == null || isNaN(num1) || isNaN(num2)){\n        console.log(\"Killed\")\n        this.setState({mathDisplay: \"Error\"})\n        break\n      }\n      total = temp\n      mathArray.splice(0, 3)\n      mathArray.unshift(total)\n      this.setState({mathDisplay: total})\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <h1 className=\"mathDisplay\">{this.state.mathDisplay}</h1>\n          {this.state.keys.map((key, index) => {\n            return <Button key={index} buttonLabel={key} click={this.buttonClick}/>\n          })}\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}